// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FriendRequestType {
  CANCELED
  PENDING
  ACCEPTED
}


model User {
  id         String  @id @default(uuid())
  login      String  @unique
  email      String?
  image      String
  first_name String?
  last_name  String?
  username   String?
  twoFactorAuthSecret  String?
  twoFactorAuthEnabled Boolean @default(false)

  friends  User[] @relation("UserFriends")
  friendOf User[] @relation("UserFriends")

  blockedUsers User[] @relation("BlockedUsers")
  blockedBy User[] @relation("BlockedUsers")

  sentFriendRequests		FriendRequest[] @relation("FriendsRequestor")
	receivedFriendRequests	FriendRequest[] @relation("FriendsRequestee")

  wins   Match[] @relation("winner")
  losses Match[] @relation("loser")
}

model Match {
  id             String   @id @default(uuid())
  playerwinScore Int
  playerlosScore Int
  winner         User?    @relation("winner", fields: [userwinId], references: [id])
  loser          User?    @relation("loser", fields: [userlosId], references: [id])
  userwinId      String?
  userlosId      String?
  createdAt      DateTime @default(now())
}

model FriendRequest {
  id                  String @id @default(uuid()) @unique
  type                FriendRequestType

  requestor				    User @relation("FriendsRequestor", fields: [requesterId], references: [id])
  requestee				    User @relation("FriendsRequestee", fields: [requesteeId], references: [id])
  requesteeId         String 
  requesterId         String

  @@map("friendRequest")
}