// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FriendRequestType {
  CANCELED
  PENDING
  ACCEPTED
}

enum ChatType {
  DIRECT_MESSAGE
  PUBLIC
  PRIVATE
  PROTECTED
}

model User {
  id                   String     @id @default(uuid())
  login                String     @unique
  email                String?
  image                String
  first_name           String?
  last_name            String?
  username             String?    @unique
  chatRooms            ChatRoom[] @relation("Participants")
  twoFactorAuthSecret  String?
  twoFactorAuthEnabled Boolean    @default(false)

  ownerOf ChatRoom[] @relation("Owners")
  adminOf ChatRoom[] @relation("Admins")

  friends  User[] @relation("UserFriends")
  friendOf User[] @relation("UserFriends")

  blockedUsers User[] @relation("BlockedUsers")
  blockedBy User[] @relation("BlockedUsers")

  sentFriendRequests		FriendRequest[] @relation("FriendsRequestor")
	receivedFriendRequests	FriendRequest[] @relation("FriendsRequestee")

  chatRoomId String?
  Message    Message[]
  wins       Match[]   @relation("winner")
  losses     Match[]   @relation("loser")
}

model ChatRoom {
  id           String    @id @default(uuid())
  name         String
  image        String
  password     String    @default("")
  type         ChatType
  owner        User      @relation("Owners", fields: [userId], references: [id])
  admins       User[]    @relation("Admins")
  messages     Message[]
  participants User[]    @relation("Participants")

  userId String
}

model Message {
  id             String   @id @default(uuid())
  content        String
  chat_id        String
  chat_reference ChatRoom @relation(fields: [chat_id], references: [id])
  sender_id      String
  sender         User     @relation(fields: [userId], references: [id])
  userId         String
}

model Match {
  id             String   @id @default(uuid())
  playerwinScore Int
  playerlosScore Int
  winner         User?    @relation("winner", fields: [userwinId], references: [id])
  loser          User?    @relation("loser", fields: [userlosId], references: [id])
  userwinId      String?
  userlosId      String?
  createdAt      DateTime @default(now())
}

model FriendRequest {
  id                  String @id @default(uuid()) @unique
  type                FriendRequestType

  requestor				    User @relation("FriendsRequestor", fields: [requesterId], references: [id])
  requestee				    User @relation("FriendsRequestee", fields: [requesteeId], references: [id])
  requesteeId         String 
  requesterId         String

  @@map("friendRequest")
}